# version: "3.10"

services:


  #-----------------------------
  # API SERVICE
  #-----------------------------
  # This is the real API available at port 3030.  It builds an image 
  # for the top level docker-compose and may not be the same image 
  # as built under the /api folder directly
  api:
    build: ${PWD}/ # must be relative to the compose file
    environment:
      - NODE_ENV=development
      - NODE_CONFIG_ENV=contract-test
      - MIGRATION=true
      - SEED=true
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "3030:3030"
    networks:
      - madi
    depends_on:
      database:
        condition: service_healthy
      storage: 
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s -o /dev/null -w \"%{http_code}\" http://localhost:3030 | grep -q \"404\" && exit 0 || exit 1"]
      interval: 60s
      timeout: 5s
      start_period: 60s
      start_interval: 5s
      retries: 5

  #-----------------------------
  # DATABASE SERVICE
  #-----------------------------
  # This is the postgres docker DB available at port 35432 for local usage.
  # When referencing the db from a compose container, use database:5432
  # When referencing the db from an external process, use localhost:35432
  database:
    image: "ankane/pgvector"
    environment:
      - POSTGRES_USER=unicorn_user
      - POSTGRES_PASSWORD=magical_password
      - POSTGRES_DB=rainbow_database
    # volumes:  # Commented out so that every DB is migrated and seeded fresh.
    #   - database-data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    networks:
      - madi
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U unicorn_user -d rainbow_database"]
      interval: 5s
      timeout: 5s
      retries: 5


  #-----------------------------
  # CLOUD STORAGE MOCK SERVICE
  #-----------------------------
  # This mocks out a Google Cloud Storage server so that local testing
  # can be done with a GCS Bucket library.
  storage:
    image: jamesmtc/madi-gcp-emulator:latest
    environment:
      - PORT=9023
      # If you want to user ./api/uploads as the storage folder
      - STORAGE_BASE=/ #put it in the base folder
      - STORAGE_DIR=./storage #to keep the data, you should match the volumes
    ports:
      - "9023:9023"
    volumes:
      - ${PWD}/.uploads:/storage
    networks:
      - madi
    command: ["start", "--host=storage", "--port=9023", "--in-memory"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://storage:9023 | grep 'OK' || exit 1"]
      interval: 60s
      timeout: 5s
      start_period: 30s
      start_interval: 1s
      retries: 5

  newman:
    image: postman/newman:alpine
    volumes:
      - ${PWD}/test/contracts:/etc/newman
    command: run /etc/newman/contract.collection.json --env-var storageUrl=http://storage:9023 --env-var baseUrl=http://api:3030 --folder blueprint
    networks:
      - madi
    depends_on:
      api:
        condition: service_healthy


networks:
  madi:

volumes:
  database-data:
  vss-data:
