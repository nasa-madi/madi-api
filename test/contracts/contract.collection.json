{
	"info": {
		"_postman_id": "89bc54bd-a6ec-420c-b784-b85e353ebe3c",
		"name": "Madi API v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35357"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "Find my User (Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function runFunc({res, expect, test, collvars, info}){",
									"    test(info.requestName, function(){",
									"",
									"        // Structure is correct",
									"        const jsonResponse = res.json();",
									"        if(jsonResponse.data?.[0]?.id) collvars.set(\"tempUserId\", (jsonResponse.data[0].id))",
									"        expect(jsonResponse.name).to.eql(\"NotAuthenticated\");",
									"        expect(jsonResponse.message).to.eql(\"Invalid IAP Credentials\");",
									"        expect(jsonResponse.code).to.eql(401);",
									"        expect(jsonResponse.className).to.eql(\"not-authenticated\");",
									"    })",
									"",
									"}",
									"",
									"runFunc({",
									"    expect: pm.expect, ",
									"    collvars: pm.collectionVariables, ",
									"    res: pm.response, ",
									"    test: pm.test,",
									"    info: pm.info",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-goog-authenticated-user-email",
								"value": "accounts.google.com:{{tempUserEmail}}",
								"type": "text"
							},
							{
								"key": "x-goog-authenticated-user-id",
								"value": "accounts.google.com:{{tempUserGoogId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function runFunc({res, expect, test, collvars, info}){",
									"    test(info.requestName, function(){",
									"        // Structure is correct",
									"        const jsonResponse = res.json()",
									"        expect(jsonResponse.id).to.be.above(3);",
									"        expect(jsonResponse.email).to.eql(\"example@example.com\");",
									"        expect(jsonResponse.googleId).to.eql(\"123456789\");",
									"        expect(jsonResponse.role).to.eql(\"member\");",
									"        collvars.set(\"tempUserId\", (jsonResponse.id))",
									"    })",
									"}",
									"",
									"runFunc({",
									"    expect: pm.expect, ",
									"    collvars: pm.collectionVariables, ",
									"    res: pm.response, ",
									"    test: pm.test,",
									"    info: pm.info",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-goog-authenticated-user-email",
								"value": "accounts.google.com:{{tempUserEmail}}",
								"type": "text"
							},
							{
								"key": "x-goog-authenticated-user-id",
								"value": "accounts.google.com:{{tempUserGoogId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find my User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function runFunc({res, expect, test, collvars, info}){",
									"    test(info.requestName, function(){",
									"        var result = res.json()",
									"        // Structure is correct",
									"        const jsonResponse = result?.data?.[0] || {};",
									"        expect(jsonResponse.id).to.be.above(3);",
									"        expect(jsonResponse.email).to.eql(\"example@example.com\");",
									"        expect(jsonResponse.googleId).to.eql(\"123456789\");",
									"        expect(jsonResponse.role).to.eql(\"member\");",
									"        collvars.set(\"tempUserId\", (jsonResponse.id))",
									"    })",
									"}",
									"",
									"runFunc({",
									"    expect: pm.expect, ",
									"    collvars: pm.collectionVariables, ",
									"    res: pm.response, ",
									"    test: pm.test,",
									"    info: pm.info",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-goog-authenticated-user-email",
								"value": "accounts.google.com:{{tempUserEmail}}",
								"type": "text"
							},
							{
								"key": "x-goog-authenticated-user-id",
								"value": "accounts.google.com:{{tempUserGoogId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Duplicate User (FAIL)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function runFunc({res, expect, test, collvars, info}){",
									"    test(info.requestName, function(){",
									"        var result = res.json()",
									"        // Structure is correct",
									"        const jsonResponse = res.json();",
									"        expect(jsonResponse.name).to.eql(\"Forbidden\");",
									"        expect(jsonResponse.message).to.eql(\"You are not allowed to create users\");",
									"        expect(jsonResponse.code).to.eql(403);",
									"        expect(jsonResponse.className).to.eql(\"forbidden\");",
									"        if(result.id) collvars.set(\"userId\", (result.id))",
									"    })",
									"",
									"}",
									"",
									"runFunc({",
									"    expect: pm.expect, ",
									"    collvars: pm.collectionVariables, ",
									"    res: pm.response, ",
									"    test: pm.test,",
									"    info: pm.info",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "prefer",
								"value": "example=keys_duplicate_key",
								"type": "text"
							},
							{
								"key": "prefer",
								"value": "code=400",
								"type": "text"
							},
							{
								"key": "x-goog-authenticated-user-email",
								"value": "accounts.google.com:{{tempUserEmail}}",
								"type": "text"
							},
							{
								"key": "x-goog-authenticated-user-id",
								"value": "accounts.google.com:{{tempUserGoogId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User (Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function runFunc({res, expect, test, collvars, info}){",
									"    test(info.requestName, function(){",
									"        var result = res.json()",
									"        // Structure is correct",
									"        const jsonResponse = res.json();",
									"        expect(jsonResponse.name).to.eql(\"Forbidden\");",
									"        expect(jsonResponse.message).to.eql(\"You are not allowed to remove users\");",
									"        expect(jsonResponse.code).to.eql(403);",
									"        expect(jsonResponse.className).to.eql(\"forbidden\");",
									"        if(result.id) collvars.set(\"userId\", (result.id))",
									"    })",
									"",
									"}",
									"",
									"runFunc({",
									"    expect: pm.expect, ",
									"    collvars: pm.collectionVariables, ",
									"    res: pm.response, ",
									"    test: pm.test,",
									"    info: pm.info",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-goog-authenticated-user-email",
								"value": "accounts.google.com:{{tempUserEmail}}",
								"type": "text"
							},
							{
								"key": "x-goog-authenticated-user-id",
								"value": "accounts.google.com:{{tempUserGoogId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{tempUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{tempUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function() {",
									"    var result = pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('email');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-goog-authenticated-user-email",
								"value": "accounts.google.com:superadmin@example.com",
								"type": "text"
							},
							{
								"key": "x-goog-authenticated-user-id",
								"value": "accounts.google.com:00000000",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{tempUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{tempUserId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tools",
			"item": [
				{
					"name": "List Tools",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function runFunc({res, expect, test, collvars, info}){",
									"    test(info.requestName, function(){",
									"        var result = res.json()",
									"        expect(res).to.have.status(200);",
									"        // Structure is correct",
									"        expect(result).to.have.property('data');",
									"        expect(result?.data).to.have.lengthOf.at.least(1);",
									"    })",
									"}",
									"",
									"runFunc({",
									"    expect: pm.expect, ",
									"    collvars: pm.collectionVariables, ",
									"    res: pm.response, ",
									"    test: pm.test,",
									"    info: pm.info",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3030/tools",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"tools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function runFunc({ res, expect, test, collvars, info }) {",
									"    test(info.requestName, function(){",
									"        const result = res.json();",
									"",
									"        // Status is correct",
									"        expect(res).to.have.status(200);",
									"",
									"        // Structure is correct",
									"        expect(result).to.have.property('function');",
									"",
									"        // Collection variable setting",
									"        collvars.set(\"tool_desc\", JSON.stringify(result))",
									"    });",
									"}",
									"",
									"runFunc({",
									"    expect: pm.expect,",
									"    collvars: pm.collectionVariables,",
									"    res: pm.response,",
									"    test: pm.test,",
									"    info: pm.info",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3030/tools/{{tool_name}}",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"tools",
								"{{tool_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Run Tool",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"function runFunc({res, expect, test, collvars, info}){",
									"    test(info.requestName, function(){",
									"        var result = res.json()",
									"        // Structure, status, and name are correct",
									"        expect(res).to.have.status(201);",
									"        expect(result[0].name).to.eql(\"get_current_weather\");",
									"        expect(result[0]).to.have.property('tool_call_id');",
									"        expect(result[0]).to.have.property('role');",
									"        expect(result[0]).to.have.property('content');",
									"    })",
									"}",
									"",
									"runFunc({",
									"    expect: pm.expect, ",
									"    collvars: pm.collectionVariables, ",
									"    res: pm.response, ",
									"    test: pm.test,",
									"    info: pm.info",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tool_calls\": [\n        {\n            \"id\": \"call_1\",\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"get_current_weather\",\n                \"arguments\": \"{\\\"location\\\": \\\"San Francisco, CA\\\",\\\"unit\\\": \\\"celsius\\\"}\"\n            }\n        },\n        {\n            \"id\": \"call_2\",\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"get_current_weather\",\n                \"arguments\": {\n                    \"location\": \"San Francisco, CA\",\n                    \"unit\": \"celsius\"\n                    }\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3030/tools/",
							"host": [
								"localhost"
							],
							"port": "3030",
							"path": [
								"tools",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "chats",
			"item": [
				{
					"name": "json",
					"item": [
						{
							"name": "Chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function runFunc({ res, expect, test, collvars, info }) {",
											"    test(info.requestName, function () {",
											"        const jsonResponse = res.json();",
											"        // Check status",
											"        expect(res).to.have.status(201);",
											"        // Check properties",
											"        expect(jsonResponse).to.have.property('id');",
											"        expect(jsonResponse).to.have.property('object');",
											"        expect(jsonResponse).to.have.property('created');",
											"        expect(jsonResponse).to.have.property('choices');",
											"        // Check that choices is an array",
											"        expect(jsonResponse['choices']).to.be.an('array');",
											"    })",
											"}",
											"",
											"runFunc({",
											"    expect: pm.expect,",
											"    collvars: pm.collectionVariables,",
											"    res: pm.response,",
											"    test: pm.test,",
											"    info: pm.info",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Hello!\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/chats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chats"
									]
								}
							},
							"response": []
						},
						{
							"name": "Chat with 1 Function",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function runFunc({res, expect, test, collvars, info}){",
											"    test(info.requestName, function() {",
											"        var result = res.json();",
											"        // Status Check",
											"        expect(res).to.have.status(201);",
											"        // Structure is correct",
											"        expect(result).to.have.property('id');",
											"        expect(result).to.have.property('object');",
											"        expect(result).to.have.property('created');",
											"        expect(result).to.have.property('choices');",
											"        // Check that choices is an array",
											"        expect(result.choices).to.be.an('array');",
											"        // Optional chaining to access nested properties",
											"        expect(result?.choices?.[0]?.message?.role).to.equal('assistant');",
											"        expect(result?.choices?.[0]?.message?.tool_calls).to.be.an('array');",
											"        // Set collection variable",
											"        collvars.set(\"userId\", result.id);",
											"    })",
											"}",
											"",
											"runFunc({",
											"    expect: pm.expect, ",
											"    collvars: pm.collectionVariables, ",
											"    res: pm.response, ",
											"    test: pm.test,",
											"    info: pm.info",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What's the weather like in San Francisco?\"\n        }\n    ],\n    \"tools\":[{{tool_desc}}],\n    \"tool_choice\":\"auto\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/chats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chats"
									]
								}
							},
							"response": []
						},
						{
							"name": "Chat with Multi Functions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function runFunc({res, expect, test, collvars, info}){",
											"    test(info.requestName, function(){",
											"        var result = res.json();",
											"        // Check status",
											"        expect(res).to.have.status(201);",
											"        // Structure is correct",
											"        expect(result).to.have.property('id');",
											"        expect(result).to.have.property('object');",
											"        expect(result).to.have.property('created');",
											"        expect(result).to.have.property('choices');",
											"        // Check that choices is an array",
											"        expect(result.choices).to.be.an('array');",
											"        // Optional chaining to access nested properties",
											"        expect(result?.choices?.[0]?.message?.role).to.equal('assistant');",
											"        expect(result?.choices?.[0]?.message?.tool_calls).to.be.an('array')",
											"    });",
											"}",
											"",
											"runFunc({",
											"    expect: pm.expect, ",
											"    collvars: pm.collectionVariables, ",
											"    res: pm.response, ",
											"    test: pm.test,",
											"    info: pm.info",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What's the weather like in San Francisco, Tokyo, and Paris?\"\n        }\n    ],\n    \"tools\":[{{tool_desc}}],\n    \"tool_choice\":\"auto\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/chats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chats"
									]
								}
							},
							"response": []
						},
						{
							"name": "Chat Function Wrapup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function runFunc({res, expect, test, collvars, info}){",
											"    test(info.requestName, function(){",
											"        var result = res.json();",
											"        // Check status",
											"        expect(res).to.have.status(201);",
											"        // Structure is correct",
											"        expect(result).to.have.property('id');",
											"        expect(result).to.have.property('object');",
											"        expect(result).to.have.property('created');",
											"        expect(result).to.have.property('choices');",
											"        // Check that choices is an array",
											"        expect(result.choices).to.be.an('array');",
											"        // Optional chaining to access nested properties",
											"        expect(result?.choices?.[0]?.message?.role).to.equal('assistant');",
											"        expect(result?.choices?.[0]?.message?.content).to.be.a('string');",
											"    });",
											"}",
											"",
											"runFunc({",
											"    expect: pm.expect, ",
											"    collvars: pm.collectionVariables, ",
											"    res: pm.response, ",
											"    test: pm.test,",
											"    info: pm.info",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What's the weather like in San Francisco, Tokyo, and Paris?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": null,\n            \"tool_calls\": [\n                {\n                    \"id\": \"call_k3YLTd4jC5gTFwXneuTakbSv\",\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": \"get_current_weather\",\n                        \"arguments\": \"{\\\"location\\\": \\\"San Francisco, CA\\\"}\"\n                    }\n                },\n                {\n                    \"id\": \"call_RRE9R9AuhtLvqoHEVmywhMiJ\",\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": \"get_current_weather\",\n                        \"arguments\": \"{\\\"location\\\": \\\"Tokyo\\\"}\"\n                    }\n                },\n                {\n                    \"id\": \"call_CQWPfgIyY78pv7VKwA01Sgs1\",\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": \"get_current_weather\",\n                        \"arguments\": \"{\\\"location\\\": \\\"Paris\\\"}\"\n                    }\n                }\n            ]\n        },\n        {\n            \"tool_call_id\": \"call_k3YLTd4jC5gTFwXneuTakbSv\",\n            \"role\": \"tool\",\n            \"name\": \"get_current_weather\",\n            \"content\": \"{\\\"location\\\":\\\"San Francisco\\\",\\\"temperature\\\":\\\"72\\\",\\\"unit\\\":\\\"fahrenheit\\\"}\"\n        },\n        {\n            \"tool_call_id\": \"call_RRE9R9AuhtLvqoHEVmywhMiJ\",\n            \"role\": \"tool\",\n            \"name\": \"get_current_weather\",\n            \"content\": \"{\\\"location\\\":\\\"Tokyo\\\",\\\"temperature\\\":\\\"32\\\",\\\"unit\\\":\\\"celsius\\\"}\"\n        },\n        {\n            \"tool_call_id\": \"call_CQWPfgIyY78pv7VKwA01Sgs1\",\n            \"role\": \"tool\",\n            \"name\": \"get_current_weather\",\n            \"content\": \"{\\\"location\\\":\\\"Parios\\\",\\\"temperature\\\":\\\"35\\\",\\\"unit\\\":\\\"celsius\\\"}\"\n        }\n\n    ],\n    \"tools\":[{{tool_desc}}],\n    \"tool_choice\":\"auto\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/chats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chats"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "event-stream",
					"item": [
						{
							"name": "Chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify text/event-stream response\", function () {",
											"  // Check if the response has a valid Content-Type header",
											"  pm.response.to.have.header(\"Content-Type\", \"text/event-stream\");",
											"",
											"  // Parse the response body as text",
											"  const responseBody = pm.response.text();",
											"",
											"  // Split the response body into individual lines",
											"  const lines = responseBody.split(\"\\n\");",
											"",
											"  // Check if the first line starts with \"data:\"",
											"  pm.expect(lines[0].startsWith(\"data:\")).to.be.true;",
											"",
											"  // Check if subsequent lines also start with \"data:\" or \"event:\"",
											"  for (let i = 1; i < lines.length; i++) {",
											"    const line = lines[i].trim();",
											"    if(line)",
											"        pm.expect(line.startsWith(\"data:\") || line.startsWith(\"[DONE]\")).to.be.true;",
											"  }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stream\":true,\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Hello\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/chats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chats"
									]
								}
							},
							"response": [
								{
									"name": "Chat",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Hello?\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/chats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"chats"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": ""
										},
										{
											"key": "Content-Type",
											"value": "text/event-stream"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Date",
											"value": "Fri, 29 Dec 2023 14:55:20 GMT"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "data: {\"id\":\"chatcmpl-8b8YZGHwA2W5lHlvFLjDXIgIpKJ15\",\"object\":\"chat.completion.chunk\",\"created\":1703861719,\"model\":\"gpt-4-1106-preview\",\"system_fingerprint\":\"fp_3905aa4f79\",\"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-8b8YZGHwA2W5lHlvFLjDXIgIpKJ15\",\"object\":\"chat.completion.chunk\",\"created\":1703861719,\"model\":\"gpt-4-1106-preview\",\"system_fingerprint\":\"fp_3905aa4f79\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-8b8YZGHwA2W5lHlvFLjDXIgIpKJ15\",\"object\":\"chat.completion.chunk\",\"created\":1703861719,\"model\":\"gpt-4-1106-preview\",\"system_fingerprint\":\"fp_3905aa4f79\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"!\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-8b8YZGHwA2W5lHlvFLjDXIgIpKJ15\",\"object\":\"chat.completion.chunk\",\"created\":1703861719,\"model\":\"gpt-4-1106-preview\",\"system_fingerprint\":\"fp_3905aa4f79\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" How\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-8b8YZGHwA2W5lHlvFLjDXIgIpKJ15\",\"object\":\"chat.completion.chunk\",\"created\":1703861719,\"model\":\"gpt-4-1106-preview\",\"system_fingerprint\":\"fp_3905aa4f79\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" can\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-8b8YZGHwA2W5lHlvFLjDXIgIpKJ15\",\"object\":\"chat.completion.chunk\",\"created\":1703861719,\"model\":\"gpt-4-1106-preview\",\"system_fingerprint\":\"fp_3905aa4f79\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" I\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-8b8YZGHwA2W5lHlvFLjDXIgIpKJ15\",\"object\":\"chat.completion.chunk\",\"created\":1703861719,\"model\":\"gpt-4-1106-preview\",\"system_fingerprint\":\"fp_3905aa4f79\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" assist\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-8b8YZGHwA2W5lHlvFLjDXIgIpKJ15\",\"object\":\"chat.completion.chunk\",\"created\":1703861719,\"model\":\"gpt-4-1106-preview\",\"system_fingerprint\":\"fp_3905aa4f79\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" you\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-8b8YZGHwA2W5lHlvFLjDXIgIpKJ15\",\"object\":\"chat.completion.chunk\",\"created\":1703861719,\"model\":\"gpt-4-1106-preview\",\"system_fingerprint\":\"fp_3905aa4f79\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" today\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-8b8YZGHwA2W5lHlvFLjDXIgIpKJ15\",\"object\":\"chat.completion.chunk\",\"created\":1703861719,\"model\":\"gpt-4-1106-preview\",\"system_fingerprint\":\"fp_3905aa4f79\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"?\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-8b8YZGHwA2W5lHlvFLjDXIgIpKJ15\",\"object\":\"chat.completion.chunk\",\"created\":1703861719,\"model\":\"gpt-4-1106-preview\",\"system_fingerprint\":\"fp_3905aa4f79\",\"choices\":[{\"index\":0,\"delta\":{},\"logprobs\":null,\"finish_reason\":\"stop\"}]}\n\n"
								}
							]
						},
						{
							"name": "Chat with 1 Function",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify text/event-stream response\", function () {",
											"  // Check if the response has a valid Content-Type header",
											"  pm.response.to.have.header(\"Content-Type\", \"text/event-stream\");",
											"",
											"  // Parse the response body as text",
											"  const responseBody = pm.response.text();",
											"",
											"  // Split the response body into individual lines",
											"  const lines = responseBody.split(\"\\n\");",
											"",
											"  // Check if the first line starts with \"data:\"",
											"  pm.expect(lines[0].startsWith(\"data:\")).to.be.true;",
											"",
											"  // Check if subsequent lines also start with \"data:\" or \"event:\"",
											"  for (let i = 1; i < lines.length; i++) {",
											"    const line = lines[i].trim();",
											"    if(line)",
											"        pm.expect(line.startsWith(\"data:\") || line.startsWith(\"[DONE]\")).to.be.true;",
											"  }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stream\": true,\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What's the weather like in San Francisco, Tokyo, and Paris?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": null,\n            \"tool_calls\": [\n                {\n                    \"id\": \"call_JWCIYR0JNTemNUCW8oBcxzpD\",\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": \"get_current_weather\",\n                        \"arguments\": \"{\\\"location\\\": \\\"San Francisco, CA\\\", \\\"unit\\\": \\\"fahrenheit\\\"}\"\n                    }\n                },\n                {\n                    \"id\": \"call_lDt6SOByBTN9wzsvB1ZmQoi2\",\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": \"get_current_weather\",\n                        \"arguments\": \"{\\\"location\\\": \\\"Tokyo, Japan\\\", \\\"unit\\\": \\\"celsius\\\"}\"\n                    }\n                },\n                {\n                    \"id\": \"call_cm0OKeliN5yr8qrsQ1kchtmM\",\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": \"get_current_weather\",\n                        \"arguments\": \"{\\\"location\\\": \\\"Paris, France\\\", \\\"unit\\\": \\\"celsius\\\"}\"\n                    }\n                }\n            ]\n        },\n        {\n            \"role\": \"tool\",\n            \"tool_call_id\": \"call_JWCIYR0JNTemNUCW8oBcxzpD\",\n            \"name\": \"get_current_weather\",\n            \"content\": \"{\\\"location\\\": \\\"San Francisco, CA\\\", \\\"temperature\\\": \\\"10\\\", \\\"unit\\\": \\\"celsius\\\" }\"\n        },\n        {\n            \"role\": \"tool\",\n            \"tool_call_id\": \"call_lDt6SOByBTN9wzsvB1ZmQoi2\",\n            \"name\": \"get_current_weather\",\n            \"content\": \"{\\\"location\\\": \\\"Tokyo, Japan\\\", \\\"temperature\\\": \\\"10\\\", \\\"unit\\\": \\\"celsius\\\" }\"\n        },\n        {\n            \"role\": \"tool\",\n            \"tool_call_id\": \"call_cm0OKeliN5yr8qrsQ1kchtmM\",\n            \"name\": \"get_current_weather\",\n            \"content\": \"{\\\"location\\\": \\\"Paris, France\\\", \\\"temperature\\\": \\\"10\\\", \\\"unit\\\": \\\"celsius\\\" }\"\n        }\n    ],\n    \"tools\": [\n        {{tool_desc}}\n    ],\n    \"tool_choice\": \"auto\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/chats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chats"
									]
								}
							},
							"response": []
						},
						{
							"name": "Chat with Multi Functions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify text/event-stream response\", function () {",
											"  // Check if the response has a valid Content-Type header",
											"  pm.response.to.have.header(\"Content-Type\", \"text/event-stream\");",
											"",
											"  // Parse the response body as text",
											"  const responseBody = pm.response.text();",
											"",
											"  // Split the response body into individual lines",
											"  const lines = responseBody.split(\"\\n\");",
											"",
											"  // Check if the first line starts with \"data:\"",
											"  pm.expect(lines[0].startsWith(\"data:\")).to.be.true;",
											"",
											"  // Check if subsequent lines also start with \"data:\" or \"event:\"",
											"  for (let i = 1; i < lines.length; i++) {",
											"    const line = lines[i].trim();",
											"    if(line)",
											"        pm.expect(line.startsWith(\"data:\") || line.startsWith(\"[DONE]\")).to.be.true;",
											"  }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stream\": true,\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What's the weather like in San Francisco, Tokyo, and Paris?\"\n        }\n    ],\n    \"tools\":[{{tool_desc}}],\n    \"tool_choice\":\"auto\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/chats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chats"
									]
								}
							},
							"response": []
						},
						{
							"name": "Chat Function Wrapup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify text/event-stream response\", function () {",
											"  // Check if the response has a valid Content-Type header",
											"  pm.response.to.have.header(\"Content-Type\", \"text/event-stream\");",
											"",
											"  // Parse the response body as text",
											"  const responseBody = pm.response.text();",
											"",
											"  // Split the response body into individual lines",
											"  const lines = responseBody.split(\"\\n\");",
											"",
											"  // Check if the first line starts with \"data:\"",
											"  pm.expect(lines[0].startsWith(\"data:\")).to.be.true;",
											"",
											"  // Check if subsequent lines also start with \"data:\" or \"event:\"",
											"  for (let i = 1; i < lines.length; i++) {",
											"    const line = lines[i].trim();",
											"    if(line)",
											"        pm.expect(line.startsWith(\"data:\") || line.startsWith(\"[DONE]\")).to.be.true;",
											"  }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stream\": true,\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What's the weather like in San Francisco, Tokyo, and Paris?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": null,\n            \"tool_calls\": [\n                {\n                    \"id\": \"call_k3YLTd4jC5gTFwXneuTakbSv\",\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": \"get_current_weather\",\n                        \"arguments\": \"{\\\"location\\\": \\\"San Francisco, CA\\\"}\"\n                    }\n                },\n                {\n                    \"id\": \"call_RRE9R9AuhtLvqoHEVmywhMiJ\",\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": \"get_current_weather\",\n                        \"arguments\": \"{\\\"location\\\": \\\"Tokyo\\\"}\"\n                    }\n                },\n                {\n                    \"id\": \"call_CQWPfgIyY78pv7VKwA01Sgs1\",\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": \"get_current_weather\",\n                        \"arguments\": \"{\\\"location\\\": \\\"Paris\\\"}\"\n                    }\n                }\n            ]\n        },\n        {\n            \"tool_call_id\": \"call_k3YLTd4jC5gTFwXneuTakbSv\",\n            \"role\": \"tool\",\n            \"name\": \"get_current_weather\",\n            \"content\": \"{\\\"location\\\":\\\"San Francisco\\\",\\\"temperature\\\":\\\"72\\\",\\\"unit\\\":\\\"fahrenheit\\\"}\"\n        },\n        {\n            \"tool_call_id\": \"call_RRE9R9AuhtLvqoHEVmywhMiJ\",\n            \"role\": \"tool\",\n            \"name\": \"get_current_weather\",\n            \"content\": \"{\\\"location\\\":\\\"Tokyo\\\",\\\"temperature\\\":\\\"32\\\",\\\"unit\\\":\\\"celsius\\\"}\"\n        },\n        {\n            \"tool_call_id\": \"call_CQWPfgIyY78pv7VKwA01Sgs1\",\n            \"role\": \"tool\",\n            \"name\": \"get_current_weather\",\n            \"content\": \"{\\\"location\\\":\\\"Parios\\\",\\\"temperature\\\":\\\"35\\\",\\\"unit\\\":\\\"celsius\\\"}\"\n        }\n\n    ],\n    \"tools\":[{{tool_desc}}],\n    \"tool_choice\":\"auto\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/chats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chats"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "uploads2",
			"item": [
				{
					"name": "Create Short Upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(201);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.collectionVariables.set(\"uploadId_0\", (result.id))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\": {\n        \"int\": 1,\n        \"bool\": true,\n        \"string\": \"this is the text\"\n    },\n    \"pageContent\": \"content\",\n    \"documentId\": 1,\n    \"documentIndex\": 0,\n    \"toolName\": \"{{tool_name}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/uploads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads"
							]
						}
					},
					"response": [
						{
							"name": "Create Short Upload",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"metadata\": {\n        \"int\": 1,\n        \"bool\": true,\n        \"string\": \"this is the text\"\n    },\n    \"pageContent\": \"content\",\n    \"documentId\": 1,\n    \"documentIndex\": 0,\n    \"toolName\": \"{{tool_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/uploads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"uploads"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "224"
								},
								{
									"key": "Date",
									"value": "Wed, 20 Dec 2023 14:36:19 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 56,\n    \"hash\": \"040f06fd774092478d450774f5ba30c5da78acc8\",\n    \"metadata\": {\n        \"int\": 1,\n        \"bool\": true,\n        \"string\": \"this is the text\"\n    },\n    \"pageContent\": \"content\",\n    \"documentId\": 1,\n    \"documentIndex\": 0,\n    \"toolName\": \"get_current_weather\",\n    \"userId\": \"19\"\n}"
						},
						{
							"name": "Create Duplicate Upload (Error)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"metadata\": {\n        \"int\": 1,\n        \"bool\": true,\n        \"string\": \"this is the text\"\n    },\n    \"pageContent\": \"content\",\n    \"documentId\": 1,\n    \"documentIndex\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/uploads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"uploads"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "269"
								},
								{
									"key": "Date",
									"value": "Wed, 20 Dec 2023 14:36:38 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"BadRequest\",\n    \"message\": \"Error resolving data\",\n    \"code\": 400,\n    \"className\": \"bad-request\",\n    \"data\": {\n        \"embedding\": {\n            \"name\": \"BadRequest\",\n            \"message\": \"Hash 040f06fd774092478d450774f5ba30c5da78acc8 is not unique. Document already exists.\",\n            \"code\": 400,\n            \"className\": \"bad-request\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Create Duplicate Upload (Error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"    // Code is correct",
									"    pm.response.to.have.status(400);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\":{\n        \"int\":1,\n        \"bool\":true,\n        \"string\":\"this is the text\"\n    },\n    \"pageContent\": \"content\",\n    \"documentId\":1,\n    \"documentIndex\":0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/uploads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.expect(result.metadata).to.have.property('int');",
									"    pm.expect(result.metadata.int).to.equal(2);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\":{\n        \"int\":2\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/uploads/{{uploadId_0}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads",
								"{{uploadId_0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Upload with pageContent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.expect(result).to.have.property('hash');",
									"    pm.expect(result.metadata).to.have.property('int');",
									"    pm.expect(result.metadata.int).to.equal(2);",
									"    pm.collectionVariables.set(\"uploadHash_0\", (result.hash))",
									"",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pageContent\": \"Now principles discovered off increasing how reasonably middletons men. Add seems out man met plate court sense. His joy she worth truth given. All year feet led view went sake. You agreeable breakfast his set perceived immediate. Stimulated man are projecting favourable middletons can cultivated.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/uploads/{{uploadId_0}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads",
								"{{uploadId_0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Upload with duplicate pageContent (Error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.expect(result.metadata).to.have.property('int');",
									"    pm.expect(result.metadata.int).to.equal(2);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pageContent\": \"Now principles discovered off increasing how reasonably middletons men. Add seems out man met plate court sense. His joy she worth truth given. All year feet led view went sake. You agreeable breakfast his set perceived immediate. Stimulated man are projecting favourable middletons can cultivated.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/uploads/{{uploadId_0}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads",
								"{{uploadId_0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Long Upload 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(201);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.collectionVariables.set(\"uploadId_1\", (result.id))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\":{\n        \"int\":1,\n        \"bool\":true,\n        \"string\":\"this is the text\"\n    },\n    \"pageContent\": \"The interior walls behind an arrow loop are often cut away at an oblique angle so that the archer has a wide field of view and field of fire. Arrow slits come in a variety of forms. A common one is the cross, accommodating the use of both the longbow and the crossbow. The narrow vertical aperture permits the archer large degrees of freedom to vary the elevation and direction of their bowshot but makes it difficult for attackers to harm the archer since there is only a small target at which to aim.\",\n    \"documentId\":2,\n    \"documentIndex\":0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/uploads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Long Upload 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(201);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.collectionVariables.set(\"uploadId_2\", (result.id))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\":{\n        \"int\":1,\n        \"bool\":true,\n        \"string\":\"this is the text\"\n    },\n    \"pageContent\": \"The invention of the arrowslit is attributed to Archimedes during the siege of Syracuse in 214–212 BC (although archaeological evidence supports their existence in Egyptian Middle Kingdom forts around 1860 BC).[3]\",\n    \"documentId\":2,\n    \"documentIndex\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/uploads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Long Upload 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(201);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.collectionVariables.set(\"uploadId_3\", (result.id))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\":{\n        \"int\":1,\n        \"bool\":true,\n        \"string\":\"this is the text\"\n    },\n    \"pageContent\": \"The Benz Patent-Motorwagen was a motor tricycle with a rear-mounted engine. The vehicle contained many new inventions. It was constructed of steel tubing with woodwork panels. The steel-spoked wheels and solid rubber tires were Benz's own design. Steering was by way of a toothed rack that pivoted the unsprung front wheel. Fully elliptic springs were used at the back along with a beam axle and chain drive on both sides. A simple belt system served as a single-speed transmission, varying torque between an open disc and drive disc.\",\n    \"documentId\":2,\n    \"documentIndex\":2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/uploads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.expect(result.id).to.be.equal(parseInt(pm.collectionVariables.get(\"uploadId_0\")))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/uploads/{{uploadId_0}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads",
								"{{uploadId_0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Upload by Hash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('data');",
									"    pm.expect(result?.data).to.have.lengthOf.at.least(1)",
									"    pm.expect(result?.data?.[0]?.id).to.be.equal(parseInt(pm.collectionVariables.get(\"uploadId_0\")))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/uploads?hash={{uploadHash_0}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads"
							],
							"query": [
								{
									"key": "hash",
									"value": "{{uploadHash_0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Upload return Embedding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('data');",
									"    pm.expect(result?.data).to.have.lengthOf.at.least(1)",
									"    pm.expect(result?.data?.[0]?.id).to.be.equal(parseInt(pm.collectionVariables.get(\"uploadId_3\")))",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/uploads?$search=\"arrowslit\"&$select[]=embedding&$select[]=id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads"
							],
							"query": [
								{
									"key": "$search",
									"value": "\"arrowslit\""
								},
								{
									"key": "$select[]",
									"value": "embedding"
								},
								{
									"key": "$select[]",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Upload by Embedding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('data');",
									"    pm.expect(result?.data.length).to.equal(4)",
									"    pm.expect(result?.data?.[0]?.id).to.be.equal(parseInt(pm.collectionVariables.get(\"uploadId_3\")))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{baseUrl}}/uploads?$search=\"arrowslit\"",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads"
							],
							"query": [
								{
									"key": "$search",
									"value": "\"arrowslit\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search and Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('data');",
									"    pm.expect(result?.data.length).to.equal(3)",
									"    pm.expect(result?.data?.[0]?.id).to.be.equal(parseInt(pm.collectionVariables.get(\"uploadId_3\")))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/uploads?$search=\"arrowslit\"&documentId=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads"
							],
							"query": [
								{
									"key": "$search",
									"value": "\"arrowslit\""
								},
								{
									"key": "documentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/uploads/{{uploadId_0}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads",
								"{{uploadId_0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Upload 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/uploads/{{uploadId_1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads",
								"{{uploadId_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Upload 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/uploads/{{uploadId_2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads",
								"{{uploadId_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Upload 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/uploads/{{uploadId_3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads",
								"{{uploadId_3}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "documents",
			"item": [
				{
					"name": "doc",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pageContent\":\"this is my content\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/documents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Short Document",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/documents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Long Document (Split) Copy",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/documents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Long Document (Error)",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/documents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/documents/{{docId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"documents",
								"{{docId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document with Chunks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/documents/{{docId}}?chunks=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"documents",
								"{{docId}}"
							],
							"query": [
								{
									"key": "chunks",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Document",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/documents",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Document",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/documents?search='this is the text I want to search by'",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"documents"
							],
							"query": [
								{
									"key": "search",
									"value": "'this is the text I want to search by'"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "chunks",
			"item": [
				{
					"name": "Create Short Chunk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(201);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.collectionVariables.set(\"chunkId_0\", (result.id))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\": {\n        \"int\": 1,\n        \"bool\": true,\n        \"string\": \"this is the text\"\n    },\n    \"pageContent\": \"content\",\n    \"documentId\": 1,\n    \"documentIndex\": 0,\n    \"toolName\": \"{{tool_name}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chunks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks"
							]
						}
					},
					"response": [
						{
							"name": "Create Short Chunk",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"metadata\": {\n        \"int\": 1,\n        \"bool\": true,\n        \"string\": \"this is the text\"\n    },\n    \"pageContent\": \"content\",\n    \"documentId\": 1,\n    \"documentIndex\": 0,\n    \"toolName\": \"{{tool_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/chunks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chunks"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "224"
								},
								{
									"key": "Date",
									"value": "Wed, 20 Dec 2023 14:36:19 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 56,\n    \"hash\": \"040f06fd774092478d450774f5ba30c5da78acc8\",\n    \"metadata\": {\n        \"int\": 1,\n        \"bool\": true,\n        \"string\": \"this is the text\"\n    },\n    \"pageContent\": \"content\",\n    \"documentId\": 1,\n    \"documentIndex\": 0,\n    \"toolName\": \"get_current_weather\",\n    \"userId\": \"19\"\n}"
						},
						{
							"name": "Create Duplicate Chunk (Error)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"metadata\": {\n        \"int\": 1,\n        \"bool\": true,\n        \"string\": \"this is the text\"\n    },\n    \"pageContent\": \"content\",\n    \"documentId\": 1,\n    \"documentIndex\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/chunks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chunks"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "269"
								},
								{
									"key": "Date",
									"value": "Wed, 20 Dec 2023 14:36:38 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"BadRequest\",\n    \"message\": \"Error resolving data\",\n    \"code\": 400,\n    \"className\": \"bad-request\",\n    \"data\": {\n        \"embedding\": {\n            \"name\": \"BadRequest\",\n            \"message\": \"Hash 040f06fd774092478d450774f5ba30c5da78acc8 is not unique. Document already exists.\",\n            \"code\": 400,\n            \"className\": \"bad-request\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Create Duplicate Chunk (Error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"    // Code is correct",
									"    pm.response.to.have.status(400);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\":{\n        \"int\":1,\n        \"bool\":true,\n        \"string\":\"this is the text\"\n    },\n    \"pageContent\": \"content\",\n    \"documentId\":1,\n    \"documentIndex\":0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chunks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Chunk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.expect(result.metadata).to.have.property('int');",
									"    pm.expect(result.metadata.int).to.equal(2);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\":{\n        \"int\":2\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chunks/{{chunkId_0}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks",
								"{{chunkId_0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Chunk with pageContent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.expect(result).to.have.property('hash');",
									"    pm.expect(result.metadata).to.have.property('int');",
									"    pm.expect(result.metadata.int).to.equal(2);",
									"    pm.collectionVariables.set(\"chunkHash_0\", (result.hash))",
									"",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pageContent\": \"Now principles discovered off increasing how reasonably middletons men. Add seems out man met plate court sense. His joy she worth truth given. All year feet led view went sake. You agreeable breakfast his set perceived immediate. Stimulated man are projecting favourable middletons can cultivated.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chunks/{{chunkId_0}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks",
								"{{chunkId_0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Chunk with duplicate pageContent (Error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.expect(result.metadata).to.have.property('int');",
									"    pm.expect(result.metadata.int).to.equal(2);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pageContent\": \"Now principles discovered off increasing how reasonably middletons men. Add seems out man met plate court sense. His joy she worth truth given. All year feet led view went sake. You agreeable breakfast his set perceived immediate. Stimulated man are projecting favourable middletons can cultivated.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chunks/{{chunkId_0}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks",
								"{{chunkId_0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Long Chunk 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(201);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.collectionVariables.set(\"chunkId_1\", (result.id))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\":{\n        \"int\":1,\n        \"bool\":true,\n        \"string\":\"this is the text\"\n    },\n    \"pageContent\": \"The interior walls behind an arrow loop are often cut away at an oblique angle so that the archer has a wide field of view and field of fire. Arrow slits come in a variety of forms. A common one is the cross, accommodating the use of both the longbow and the crossbow. The narrow vertical aperture permits the archer large degrees of freedom to vary the elevation and direction of their bowshot but makes it difficult for attackers to harm the archer since there is only a small target at which to aim.\",\n    \"documentId\":2,\n    \"documentIndex\":0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chunks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Long Chunk 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(201);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.collectionVariables.set(\"chunkId_2\", (result.id))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\":{\n        \"int\":1,\n        \"bool\":true,\n        \"string\":\"this is the text\"\n    },\n    \"pageContent\": \"The invention of the arrowslit is attributed to Archimedes during the siege of Syracuse in 214–212 BC (although archaeological evidence supports their existence in Egyptian Middle Kingdom forts around 1860 BC).[3]\",\n    \"documentId\":2,\n    \"documentIndex\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chunks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Long Chunk 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(201);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.collectionVariables.set(\"chunkId_3\", (result.id))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"metadata\":{\n        \"int\":1,\n        \"bool\":true,\n        \"string\":\"this is the text\"\n    },\n    \"pageContent\": \"The Benz Patent-Motorwagen was a motor tricycle with a rear-mounted engine. The vehicle contained many new inventions. It was constructed of steel tubing with woodwork panels. The steel-spoked wheels and solid rubber tires were Benz's own design. Steering was by way of a toothed rack that pivoted the unsprung front wheel. Fully elliptic springs were used at the back along with a beam axle and chain drive on both sides. A simple belt system served as a single-speed transmission, varying torque between an open disc and drive disc.\",\n    \"documentId\":2,\n    \"documentIndex\":2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chunks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Chunk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('pageContent');",
									"    pm.expect(result).to.have.property('metadata');",
									"    pm.expect(result.id).to.be.equal(parseInt(pm.collectionVariables.get(\"chunkId_0\")))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/chunks/{{chunkId_0}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks",
								"{{chunkId_0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Chunk by Hash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('data');",
									"    pm.expect(result?.data).to.have.lengthOf.at.least(1)",
									"    pm.expect(result?.data?.[0]?.id).to.be.equal(parseInt(pm.collectionVariables.get(\"chunkId_0\")))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/chunks?hash={{chunkHash_0}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks"
							],
							"query": [
								{
									"key": "hash",
									"value": "{{chunkHash_0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Chunk return Embedding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('data');",
									"    pm.expect(result?.data).to.have.lengthOf.at.least(1)",
									"    pm.expect(result?.data?.[0]?.id).to.be.equal(parseInt(pm.collectionVariables.get(\"chunkId_3\")))",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/chunks?$search=\"arrowslit\"&$select[]=embedding&$select[]=id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks"
							],
							"query": [
								{
									"key": "$search",
									"value": "\"arrowslit\""
								},
								{
									"key": "$select[]",
									"value": "embedding"
								},
								{
									"key": "$select[]",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Chunk by Embedding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('data');",
									"    pm.expect(result?.data.length).to.equal(4)",
									"    pm.expect(result?.data?.[0]?.id).to.be.equal(parseInt(pm.collectionVariables.get(\"chunkId_3\")))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{baseUrl}}/chunks?$search=\"arrowslit\"",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks"
							],
							"query": [
								{
									"key": "$search",
									"value": "\"arrowslit\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search and Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    var result = pm.response.json()",
									"",
									"    pm.response.to.have.status(200);",
									"    // Structure is correct",
									"    pm.expect(result).to.have.property('data');",
									"    pm.expect(result?.data.length).to.equal(3)",
									"    pm.expect(result?.data?.[0]?.id).to.be.equal(parseInt(pm.collectionVariables.get(\"chunkId_3\")))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/chunks?$search=\"arrowslit\"&documentId=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks"
							],
							"query": [
								{
									"key": "$search",
									"value": "\"arrowslit\""
								},
								{
									"key": "documentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Chunk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chunks/{{chunkId_0}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks",
								"{{chunkId_0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Chunk 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chunks/{{chunkId_1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks",
								"{{chunkId_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Chunk 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chunks/{{chunkId_2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks",
								"{{chunkId_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Chunk 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function(){",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chunks/{{chunkId_3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chunks",
								"{{chunkId_3}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "gcs",
			"item": [
				{
					"name": "Find Buckets (Zero)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{storageUrl}}/storage/v1/b",
							"host": [
								"{{storageUrl}}"
							],
							"path": [
								"storage",
								"v1",
								"b"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Bucket",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"my-bucket\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{storageUrl}}/storage/v1/b",
							"host": [
								"{{storageUrl}}"
							],
							"path": [
								"storage",
								"v1",
								"b"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Buckets",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{storageUrl}}/storage/v1/b",
							"host": [
								"{{storageUrl}}"
							],
							"path": [
								"storage",
								"v1",
								"b"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bucket",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{storageUrl}}/storage/v1/b/{{bucket-name}}",
							"host": [
								"{{storageUrl}}"
							],
							"path": [
								"storage",
								"v1",
								"b",
								"{{bucket-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Objects (Zero)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{storageUrl}}/storage/v1/b/{{bucket-name}}/o",
							"host": [
								"{{storageUrl}}"
							],
							"path": [
								"storage",
								"v1",
								"b",
								"{{bucket-name}}",
								"o"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Object",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "blob1",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/Users/neptune/Desktop/pexels.webp"
								}
							]
						},
						"url": {
							"raw": "{{storageUrl}}/storage/v1/b{{bucket-name}}/o?uploadType=resumable",
							"host": [
								"{{storageUrl}}"
							],
							"path": [
								"storage",
								"v1",
								"b{{bucket-name}}",
								"o"
							],
							"query": [
								{
									"key": "uploadType",
									"value": "resumable"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Bucket(s) Copy",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{storageUrl}}/storage/v1/b",
							"host": [
								"{{storageUrl}}"
							],
							"path": [
								"storage",
								"v1",
								"b"
							]
						}
					},
					"response": []
				},
				{
					"name": "test prefix local",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{storageUrl}}/storage/v1/b/mtc-sample-bucket",
							"host": [
								"{{storageUrl}}"
							],
							"path": [
								"storage",
								"v1",
								"b",
								"mtc-sample-bucket"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Bucket",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"my-bucket\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{storageUrl}}/storage/v1/b/{{bucket-name}}",
							"host": [
								"{{storageUrl}}"
							],
							"path": [
								"storage",
								"v1",
								"b",
								"{{bucket-name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CLI-streamTest",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000",
							"host": [
								"localhost"
							],
							"port": "3000"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Uploads",
			"item": [
				{
					"name": "Create upload",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/james/Downloads/pexels-jessica-lewis-3391378.jpg"
								},
								{
									"key": "hello",
									"value": "text",
									"type": "text"
								},
								{
									"key": "id",
									"value": "8478614283a8a2a826373c4dade6f2b3031bdd853376bad862c359ad1d32a754",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/uploads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create upload Copy",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/james/Downloads/pexels-jessica-lewis-3391378.jpg"
								},
								{
									"key": "hello",
									"value": "text",
									"type": "text"
								},
								{
									"key": "id",
									"value": "8478614283a8a2a826373c4dade6f2b3031bdd853376bad862c359ad1d32a754",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/uploads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get upload",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/james/Downloads/pexels-jessica-lewis-3391378.jpg"
								},
								{
									"key": "hello",
									"value": "text",
									"type": "text"
								},
								{
									"key": "id",
									"value": "8478614283a8a2a826373c4dade6f2b3031bdd853376bad862c359ad1d32a754",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/uploads/pexel*",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads",
								"pexel*"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find upload",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/james/Downloads/pexels-jessica-lewis-3391378.jpg"
								},
								{
									"key": "hello",
									"value": "text",
									"type": "text"
								},
								{
									"key": "id",
									"value": "8478614283a8a2a826373c4dade6f2b3031bdd853376bad862c359ad1d32a754",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/uploads/pexel*",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"uploads",
								"pexel*"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "teardown",
			"item": [
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.info.requestName, function() {",
									"    var result = pm.response.json();",
									"    pm.response.to.have.status(200);",
									"    pm.expect(result).to.have.property('id');",
									"    pm.expect(result).to.have.property('email');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function runFunc({res, expect, test, collvars, info, request}){",
					"    let email = ['x-goog-authenticated-user-email',`accounts.google.com:${collvars.get('userEmail')}`]",
					"    let userid = ['x-goog-authenticated-user-id', `accounts.google.com:${collvars.get('userGoogId')}`]",
					"",
					"    let currentEmail = pm.request.headers.get('x-goog-authenticated-user-email')",
					"    if(!currentEmail){",
					"        request.headers.add({key: email[0], value: email[1] })",
					"    }",
					"",
					"    let currentUserId = request.headers.get('x-goog-authenticated-user-id')",
					"    if(!currentUserId){",
					"        request.headers.add({key: userid[0], value: userid[1] })",
					"    }",
					"}",
					"",
					"runFunc({",
					"    expect: pm.expect, ",
					"    collvars: pm.collectionVariables, ",
					"    res: pm.response, ",
					"    test: pm.test,",
					"    info: pm.info,",
					"    request: pm.request",
					"})"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "accesstoken",
			"value": ""
		},
		{
			"key": "plugins",
			"value": ""
		},
		{
			"key": "tool_name",
			"value": "get_current_weather",
			"type": "string"
		},
		{
			"key": "weather_function",
			"value": ""
		},
		{
			"key": "tool_desc",
			"value": ""
		},
		{
			"key": "chunkId",
			"value": "5"
		},
		{
			"key": "chunkHash",
			"value": "c12f2c2d82b6c0b578c4364b437aea8ddf909544"
		},
		{
			"key": "chunkId_0",
			"value": ""
		},
		{
			"key": "chunkId_1",
			"value": ""
		},
		{
			"key": "chunkId_3",
			"value": ""
		},
		{
			"key": "chunkId_2",
			"value": ""
		},
		{
			"key": "chunkHash_0",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "http://localhost:3030",
			"type": "string"
		},
		{
			"key": "my-project-id",
			"value": "oneall-site-196204"
		},
		{
			"key": "bucket-name",
			"value": "my-bucket",
			"type": "string"
		},
		{
			"key": "blob-1-name",
			"value": "",
			"type": "string"
		},
		{
			"key": "userEmail",
			"value": "member@example.com",
			"type": "string"
		},
		{
			"key": "userGoogId",
			"value": "22222222",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "3",
			"type": "string"
		},
		{
			"key": "tempUserId",
			"value": "4"
		},
		{
			"key": "tempUserEmail",
			"value": "example@example.com",
			"type": "string"
		},
		{
			"key": "tempUserGoogId",
			"value": "123456789",
			"type": "string"
		}
	]
}